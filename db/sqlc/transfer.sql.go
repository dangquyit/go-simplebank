// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    "from_account_number",
	"to_account_number",
	"amount"
) VALUES (
    $1, $2, $3
) RETURNING id, from_account_number, to_account_number, amount, created_at, updated_at
`

type CreateTransferParams struct {
	FromAccountNumber int64 `json:"from_account_number"`
	ToAccountNumber   int64 `json:"to_account_number"`
	Amount            int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountNumber, arg.ToAccountNumber, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountNumber,
		&i.ToAccountNumber,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_number, to_account_number, amount, created_at, updated_at FROM transfers
WHERE
        from_account_number = $1 OR
        to_account_number = $2
ORDER BY id
    LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	FromAccountNumber int64 `json:"from_account_number"`
	ToAccountNumber   int64 `json:"to_account_number"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.FromAccountNumber,
		arg.ToAccountNumber,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountNumber,
			&i.ToAccountNumber,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
