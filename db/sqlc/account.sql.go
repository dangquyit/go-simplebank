// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package db

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    "account_number",
    "owner",
    "balance",
    "currency"
) VALUES (
    $1, $2, $3, $4
) RETURNING id, account_number, owner, balance, currency, created_at, updated_at
`

type CreateAccountParams struct {
	AccountNumber int64  `json:"account_number"`
	Owner         string `json:"owner"`
	Balance       int64  `json:"balance"`
	Currency      string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.AccountNumber,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE account_number = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountNumber int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountNumber)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, account_number, owner, balance, currency, created_at, updated_at FROM accounts
WHERE account_number = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountNumber int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, account_number, owner, balance, currency, created_at, updated_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET balance = $2
WHERE account_number = $1
RETURNING account_number, balance, created_at, updated_at
`

type UpdateAccountParams struct {
	AccountNumber int64 `json:"account_number"`
	Balance       int64 `json:"balance"`
}

type UpdateAccountRow struct {
	AccountNumber int64     `json:"account_number"`
	Balance       int64     `json:"balance"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.AccountNumber, arg.Balance)
	var i UpdateAccountRow
	err := row.Scan(
		&i.AccountNumber,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
